#!/usr/bin/python3

# reads chat without a browser

# shows colors on messages

# can also use espeak to read the messages to you and say who said them

# pip3 install python-socketio colorama
# https://python-socketio.readthedocs.io/en/latest/client.html#installation

# blue with white background (((them)))
# rainbow ==text==

# add ignore channel option
# add tts support


import socketio
import colorama
import json
import re
import html
import pyttsx3

def check_ignore_users(user):
    # opens the users file and checks if they are ignored
    try:
        with open('users') as f:
            for uname in f:
                if uname.strip('\n').lower() == user.lower():
                    return True
        return False
    except:
        return False

def check_ignore_channel(channel):
     # opens the channels file and checks if they are ignored
     try:
        with open('channels') as f:
            for uname in f:
                if uname.strip('\n').lower() == channel.lower():
                    return True
        return False
     except:
        return False
        
def check_tts_on():
    try:
        with open('tts') as f:
            return True
        return False
    except:
        return False

def clean_emotes(message):
    # data-emote-tooltip="SIR" title="SIR" alt="SIR"
    # just search for the alt that we want...
    # so the regex works if there is text before and after the emote
    imagetags = re.findall(r'<img\/?[^>]*>', message)
    #print(imagetags)
    for img in imagetags:
        #print('image tag matched:',img)
        matches = re.findall(r'\salt="([^"]+)"', img)
        for match in matches:
            print('Found matches:', match)
            #re.sub("<\/?[^>]*>", ':'+match+':',message);
            # should check if the match has colons in it or not already
            if ':' in match:
                message = message.replace(img, ' '+match+'', 1)
            else:
                message = message.replace(img, ' :'+match+':', 1)
        #print('message:', message)
    return message


def unescape(s):
    return html.unescape(s)

def getChannel(message):
    msg = ''

    try:
        msg = message["channel"]
        msg = clean_emotes(msg)
        msg = re.sub("<\/?[^>]*>", '',msg);
        #msg = re.sub("((https?:\/\/)|(www\.))[^\s]+", '',msg);
    except:
        msg = ''
    return msg
    
def getMessage(message):
    msg = ''

    try:
        msg = message["message"]
        msg = clean_emotes(msg)
        msg = re.sub("<\/?[^>]*>", '',msg);
        #msg = re.sub("((https?:\/\/)|(www\.))[^\s]+", '',msg);
    except:
        msg = ''
    return msg

def getFrom(message):
    msg = ''

    try:
        msg = message["username"]
        msg = clean_emotes(msg)
        msg = re.sub("<\/?[^>]*>", '',msg);
        msg = re.sub("((https?:\/\/)|(www\.))[^\s]+", '',msg);
    except:
        msg = ''
    return msg
    
sio = socketio.Client()



tts = pyttsx3.init()

messages = []
saying = False

def say(user,message):
    try:
        if False:
            messages.append(message)
        else:
            if check_tts_on():
                #saying = True
                tts.say(user + " says " + message)
                tts.runAndWait()
                #saying = False
    except:
        pass
        saying = False


def myread(message,uname):
    if not check_ignore_users(uname):
        if len(message) > 0 and message[0] == '>':
            print(colorama.Fore.RED + uname + " says:\n" + colorama.Fore.GREEN + message)
        elif len(message) > 0 and message[0] == '<':
            print(colorama.Fore.RED + uname + " says:\n" + colorama.Fore.RED + message)
        else:
            #print(colorama.Fore.RED + uname + " says:\n" + colorama.Fore.BLUE + message)
            print(colorama.Fore.RED + uname + " says:\n" + colorama.Fore.WHITE + message)
        say(uname,message)

@sio.event
def connect():
    print('connection established')
    # user profile:nulling recaptcha:null, page 'global', token: null

@sio.event
def bulkmessage(data):
    #print('message received with ', data)
    #logmessages(data)
    #sio.emit('my response', {'response': 'my response'})
    # should look at if the message was at the bot then parse the message to get the command
    for message in data:
        # Get a response to an input statement
        if not check_ignore_channel(getChannel(message)):
            #print("msg: ", getMessage(message))
            myread(unescape(getMessage(message)),getFrom(message))
            #print("resp: ", chatbot.get_response(getMessage(message)))

print("should connect...")
sio.connect('https://chat.bitwave.tv',transports='websocket')
print("wainting for events...")
sio.wait()
